% ************************************************************************
%   Description:
%   SUBROUTINE PMUT1_OCEANS (rjd,cor_x,cor_y,cor_ut1,cor_lod) 
%   This subroutine provides, in time domain, the diurnal/subdiurnal
%   tidal effets on polar motion ("), UT1 (s) and LOD (s). The tidal terms,
%   listed in the program above, have been extracted from the procedure   
%   ortho_eop.f coed by Eanes in 1997.
%     
%   N.B.:  The fundamental lunisolar arguments are those of Simon et al.  
% 
%   These corrections should be added to "average"
%   EOP values to get estimates of the instantaneous values.
%           
%               * vectorised *
%
%   Input:
%     rjd            epoch of interest given in mjd (n,1) - dynamical
%                    time or TT
%     nam            name of model (table of coefficients); 'string', to be
%                    stored in ..\EOP\eophf\*.dat; (optional) 
%                
%   Output:
%     cor_x          tidal correction in x (sec. of arc) (n,1)
%     cor_y          tidal correction in y (sec. of arc) (n,1)
%     cor_ut1        tidal correction in UT1-UTC (sec. of time) (n,1)
%     cor_lod        tidal correction in length of day (sec. of time) (n,1)
%    
% 
%   External calls: 	
%     fund_arg.m
%
%   SOFA routine coded by Ch. Bizouard (2002), initially coded by McCarthy 
%   and D.Gambis(1997) for the 8 prominent tidal waves.
%
%   Coded for VieVS:
%   02 Feb 2009 by Lucia Plank
%
%   Revision: 
%   26 May 2010 by Lucia Plank: external function for fundamental
%       arguments; enable table of coefficient for model 'nam'.
%   13 Aug 2010 by Lucia Plank: checked again; values are those from
%       interp.f
%
% *************************************************************************


function [cor_x,cor_y,cor_ut1] = eop_eanes(rjd,nam)

NARG=[];
if (nargin > 1)
    switch nam
        case 'interpf (Conventions)' 
        otherwise
        NARG = load (strcat('../EOP/eophf/',nam));
        fprintf(nam);
        fprintf('\n');
    end
end
if isempty (NARG) 
%   fprintf('interpf (Conventions)');fprintf('\n');
% ----------------
%  DATA
% ----------------
      
%   Oceanic tidal terms present in x (microas),y(microas),ut1(microseconds)       
%   NARG(j,6) : Multipliers of GMST+pi and Delaunay arguments. 
	
       NARG=[... 
  
     1,-1, 0,-2,-2,-2,  -0.05,   0.94,  -0.94,  -0.05,  0.396, -0.078
     1,-2, 0,-2, 0,-1,   0.06,   0.64,  -0.64,   0.06,  0.195, -0.059
     1,-2, 0,-2, 0,-2,   0.30,   3.42,  -3.42,   0.30,  1.034, -0.314
     1, 0, 0,-2,-2,-1,   0.08,   0.78,  -0.78,   0.08,  0.224, -0.073
     1, 0, 0,-2,-2,-2,   0.46,   4.15,  -4.15,   0.45,  1.187, -0.387
     1,-1, 0,-2, 0,-1,   1.19,   4.96,  -4.96,   1.19,  0.966, -0.474
     1,-1, 0,-2, 0,-2,   6.24,  26.31, -26.31,   6.23,  5.118, -2.499
     1, 1, 0,-2,-2,-1,   0.24,   0.94,  -0.94,   0.24,  0.172, -0.090
     1, 1, 0,-2,-2,-2,   1.28,   4.99,  -4.99,   1.28,  0.911, -0.475
     1, 0, 0,-2, 0, 0,  -0.28,  -0.77,   0.77,  -0.28, -0.093,  0.070
     1, 0, 0,-2, 0,-1,   9.22,  25.06, -25.06,   9.22,  3.025, -2.280
     1, 0, 0,-2, 0,-2,  48.82, 132.91,-132.90,  48.82, 16.020,-12.069
     1,-2, 0, 0, 0, 0,  -0.32,  -0.86,   0.86,  -0.32, -0.103,  0.078
     1, 0, 0, 0,-2, 0,  -0.66,  -1.72,   1.72,  -0.66, -0.194,  0.154
     1,-1, 0,-2, 2,-2,  -0.42,  -0.92,   0.92,  -0.42, -0.083,  0.074
     1, 1, 0,-2, 0,-1,  -0.30,  -0.64,   0.64,  -0.30, -0.057,  0.050
     1, 1, 0,-2, 0,-2,  -1.61,  -3.46,   3.46,  -1.61, -0.308,  0.271
     1,-1, 0, 0, 0, 0,  -4.48,  -9.61,   9.61,  -4.48, -0.856,  0.751
     1,-1, 0, 0, 0,-1,  -0.90,  -1.93,   1.93,  -0.90, -0.172,  0.151
     1, 1, 0, 0,-2, 0,  -0.86,  -1.81,   1.81,  -0.86, -0.161,  0.137
     1, 0,-1,-2, 2,-2,   1.54,   3.03,  -3.03,   1.54,  0.315, -0.189
     1, 0, 0,-2, 2,-1,  -0.29,  -0.58,   0.58,  -0.29, -0.062,  0.035
     1, 0, 0,-2, 2,-2,  26.13,  51.25, -51.25,  26.13,  5.512, -3.095
     1, 0, 1,-2, 2,-2,  -0.22,  -0.42,   0.42,  -0.22, -0.047,  0.025
     1, 0,-1, 0, 0, 0,  -0.61,  -1.20,   1.20,  -0.61, -0.134,  0.070
     1, 0, 0, 0, 0, 1,   1.54,   3.00,  -3.00,   1.54,  0.348, -0.171
     1, 0, 0, 0, 0, 0, -77.48,-151.74, 151.74, -77.48,-17.620,  8.548
     1, 0, 0, 0, 0,-1, -10.52, -20.56,  20.56, -10.52, -2.392,  1.159
     1, 0, 0, 0, 0,-2,   0.23,   0.44,  -0.44,   0.23,  0.052, -0.025
     1, 0, 1, 0, 0, 0,  -0.61,  -1.19,   1.19,  -0.61, -0.144,  0.065
     1, 0, 0, 2,-2, 2,  -1.09,  -2.11,   2.11,  -1.09, -0.267,  0.111
     1,-1, 0, 0, 2, 0,  -0.69,  -1.43,   1.43,  -0.69, -0.288,  0.043
     1, 1, 0, 0, 0, 0,  -3.46,  -7.28,   7.28,  -3.46, -1.610,  0.187
     1, 1, 0, 0, 0,-1,  -0.69,  -1.44,   1.44,  -0.69, -0.320,  0.037
     1, 0, 0, 0, 2, 0,  -0.37,  -1.06,   1.06,  -0.37, -0.407, -0.005
     1, 2, 0, 0, 0, 0,  -0.17,  -0.51,   0.51,  -0.17, -0.213, -0.005
     1, 0, 0, 2, 0, 2,  -1.10,  -3.42,   3.42,  -1.09, -1.436, -0.037
     1, 0, 0, 2, 0, 1,  -0.70,  -2.19,   2.19,  -0.70, -0.921, -0.023
     1, 0, 0, 2, 0, 0,  -0.15,  -0.46,   0.46,  -0.15, -0.193, -0.005
     1, 1, 0, 2, 0, 2,  -0.03,  -0.59,   0.59,  -0.03, -0.396, -0.024
     1, 1, 0, 2, 0, 1,  -0.02,  -0.38,   0.38,  -0.02, -0.253, -0.015
     2,-3, 0,-2, 0,-2,  -0.49,  -0.04,   0.63,   0.24, -0.089, -0.011
     2,-1, 0,-2,-2,-2,  -1.33,  -0.17,   1.53,   0.68, -0.224, -0.032
     2,-2, 0,-2, 0,-2,  -6.08,  -1.61,   3.13,   3.35, -0.637, -0.177
     2, 0, 0,-2,-2,-2,  -7.59,  -2.05,   3.44,   4.23, -0.745, -0.222
     2, 0, 1,-2,-2,-2,  -0.52,  -0.14,   0.22,   0.29, -0.049, -0.015
     2,-1,-1,-2, 0,-2,   0.47,   0.11,  -0.10,  -0.27,  0.033,  0.013
     2,-1, 0,-2, 0,-1,   2.12,   0.49,  -0.41,  -1.23,  0.141,  0.058
     2,-1, 0,-2, 0,-2, -56.87, -12.93,  11.15,  32.88, -3.795, -1.556
     2,-1, 1,-2, 0,-2,  -0.54,  -0.12,   0.10,   0.31, -0.035, -0.015
     2, 1, 0,-2,-2,-2, -11.01,  -2.40,   1.89,   6.41, -0.698, -0.298
     2, 1, 1,-2,-2,-2,  -0.51,  -0.11,   0.08,   0.30, -0.032, -0.014
     2,-2, 0,-2, 2,-2,   0.98,   0.11,  -0.11,  -0.58,  0.050,  0.022
     2, 0,-1,-2, 0,-2,   1.13,   0.11,  -0.13,  -0.67,  0.056,  0.025
     2, 0, 0,-2, 0,-1,  12.32,   1.00,  -1.41,  -7.31,  0.605,  0.266
     2, 0, 0,-2, 0,-2,-330.15, -26.96,  37.58, 195.92,-16.195, -7.140
     2, 0, 1,-2, 0,-2,  -1.01,  -0.07,   0.11,   0.60, -0.049, -0.021
     2,-1, 0,-2, 2,-2,   2.47,  -0.28,  -0.44,  -1.48,  0.111,  0.034
     2, 1, 0,-2, 0,-2,   9.40,  -1.44,  -1.88,  -5.65,  0.425,  0.117
     2,-1, 0, 0, 0, 0,  -2.35,   0.37,   0.47,   1.41, -0.106, -0.029
     2,-1, 0, 0, 0,-1,  -1.04,   0.17,   0.21,   0.62, -0.047, -0.013
     2, 0,-1,-2, 2,-2,  -8.51,   3.50,   3.29,   5.11, -0.437, -0.019
     2, 0, 0,-2, 2,-2,-144.13,  63.56,  59.23,  86.56, -7.547, -0.159
     2, 0, 1,-2, 2,-2,   1.19,  -0.56,  -0.52,  -0.72,  0.064,  0.000
     2, 0, 0, 0, 0, 1,   0.49,  -0.25,  -0.23,  -0.29,  0.027, -0.001
     2, 0, 0, 0, 0, 0, -38.48,  19.14,  17.72,  23.11, -2.104,  0.041
     2, 0, 0, 0, 0,-1, -11.44,   5.75,   5.32,   6.87, -0.627,  0.015
     2, 0, 0, 0, 0,-2,  -1.24,   0.63,   0.58,   0.75, -0.068,  0.002
     2, 1, 0, 0, 0, 0,  -1.77,   1.79,   1.71,   1.04, -0.146,  0.037
     2, 1, 0, 0, 0,-1,  -0.77,   0.78,   0.75,   0.45, -0.064,  0.017
     2, 0, 0, 2, 0, 2,  -0.33,   0.62,   0.65,   0.19, -0.049,  0.018];
end
% ------------------------
%  TIME Vector
% ------------------------
 
      T  = (rjd - 51544.5D0)/36525.0D0; % julian centuries
      
% ------------------------
% FUNDAMENTAL ARGUMENTS
% ------------------------
      
       ARG = fund_arg(T,3); % [rad]

% --------------------------
%  CALCULATE CORRECTIONS
% --------------------------
    
XSIN = NARG(:,7);XCOS = NARG(:,8);YSIN = NARG(:,9);YCOS = NARG(:,10);
UTSIN = NARG(:,11);UTCOS = NARG(:,12);

 
    arg  = NARG (:,1:6)*ARG';
    arg  = mod (arg,2*pi);

%     darg = NARG (:,1:6)*DARG';
    
    cor_x   = XCOS'  * cos(arg) + XSIN'  * sin(arg);
    cor_y   = YCOS'  * cos(arg) + YSIN'  * sin(arg);
    cor_ut1 = UTCOS' * cos(arg) + UTSIN' * sin(arg);
%     cor_lod = -(-UTCOS' * (sin(arg).*darg) + UTSIN' * (cos(arg).*darg));
    
% ------------
%  OUTPUT
% ------------    
    
    cor_x   = cor_x'   * 1.0d-6;     %    arcsecond (")
    cor_y   = cor_y'   * 1.0d-6;     %    arcsecond (")
    cor_ut1 = cor_ut1' * 1.0d-6;     %    second (s)
%     cor_lod = cor_lod' * 1.0d-6;     %    second (s)
  
      	
